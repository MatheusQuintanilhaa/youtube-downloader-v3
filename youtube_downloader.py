#!/usr/bin/env python3
"""
YouTube Downloader v3 - Tudo Embutido

Script otimizado para download de v√≠deos do YouTube em alta resolu√ß√£o.
v3 - Tudo Embutido: Legendas e thumbnail s√£o inseridas no arquivo MP4 final.

DISCLAIMER: Esta ferramenta √© destinada apenas para uso pessoal e educacional.
Os usu√°rios s√£o respons√°veis por cumprir os Termos de Servi√ßo do YouTube e
as leis de direitos autorais aplic√°veis. Este software n√£o encoraja ou
endossa qualquer viola√ß√£o de direitos autorais ou termos de servi√ßo.

Requer: pip install yt-dlp
Licen√ßa: MIT (veja LICENSE)
"""

import yt_dlp
import os
import shutil
import time

def check_ffmpeg():
    """Verifica se o FFmpeg est√° dispon√≠vel no PATH do sistema."""
    if shutil.which("ffmpeg"):
        print("‚úÖ FFmpeg encontrado no sistema.")
        return True
    else:
        print("‚ùå AVISO: FFmpeg n√£o foi encontrado no PATH do sistema.")
        print("   Para embutir legendas e thumbnails, o FFmpeg √© essencial.")
        print("   Voc√™ pode baix√°-lo em: https://ffmpeg.org/download.html" )
        return False

def cleanup_extra_files(output_path, final_filename):
    """Limpa arquivos extras (.vtt, .webp, etc.) ap√≥s serem embutidos."""
    print("\nüßπ Realizando limpeza final de arquivos...")
    base_name = os.path.splitext(final_filename)[0]
    
    time.sleep(1) # Pausa para garantir que os arquivos n√£o estejam em uso

    for filename in os.listdir(output_path):
        # Se o nome do arquivo come√ßa com o nome base, mas n√£o √© o v√≠deo final
        if filename.startswith(base_name) and filename != final_filename:
            try:
                os.remove(os.path.join(output_path, filename))
                print(f"   üóëÔ∏è Arquivo extra removido: {filename}")
            except OSError as e:
                print(f"   ‚ö†Ô∏è N√£o foi poss√≠vel remover {filename}: {e}")

def download_video(url: str, quality: str = '1080p', output_path: str = "downloads"):
    """
    Baixa um v√≠deo, embutindo legendas e thumbnail, e limpa os arquivos extras.
    """
    os.makedirs(output_path, exist_ok=True)

    format_selector = {
        'best': 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best',
        '1080p': 'bestvideo[height<=1080][ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best',
        '720p': 'bestvideo[height<=720][ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best'
    }

    output_template = os.path.join(output_path, '%(title)s [%(resolution)s].%(ext)s')

    ydl_opts = {
        'format': format_selector.get(quality, format_selector['best']),
        'outtmpl': output_template,
        'merge_output_format': 'mp4',
        
        # --- Configura√ß√µes para Embutir Tudo ---
        'writesubtitles': True,      # 1. Baixa as legendas
        'writeautomaticsub': True,
        'subtitleslangs': ['pt', 'en'],
        'embedsubtitles': True,      # 2. EMBUTE as legendas no v√≠deo
        
        'writethumbnail': True,      # 3. Baixa a thumbnail
        
        'postprocessors': [{
            'key': 'EmbedThumbnail', # 4. EMBUTE a thumbnail como capa
            'already_have_thumbnail': False,
        }],
        # -----------------------------------------
        
        'prefer_ffmpeg': True,
        'keepvideo': False,
        'quiet': True,
        'progress': True,
    }

    print(f"\nüöÄ Iniciando download para: {url}")
    print(f"‚ú® Qualidade: {quality} | Modo: Tudo Embutido")
    print(f"üìÇ Salvando em: {output_path}")
    print("-" * 50)

    final_filename = ""
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info_dict = ydl.extract_info(url, download=False)
            final_filename_template = ydl.prepare_filename(info_dict)
            final_filename = os.path.splitext(final_filename_template)[0] + '.mp4'

            print(f"‚è≥ Baixando e processando... Arquivo final: '{os.path.basename(final_filename)}'")
            ydl.download([url])
        
        print("\n‚úÖ Download e processamento conclu√≠dos com sucesso!")

    except Exception as e:
        print(f"\n‚ùå Ocorreu um erro: {e}")
    
    finally:
        # A limpeza agora vai apagar os arquivos .vtt e .webp originais
        if final_filename and os.path.exists(final_filename):
            cleanup_extra_files(output_path, os.path.basename(final_filename))
        else:
            # Se o arquivo final n√£o foi criado, os tempor√°rios podem ter ficado
            print("‚ö†Ô∏è Arquivo final n√£o encontrado. Verificando tempor√°rios...")
            cleanup_extra_files(output_path, "NenhumArquivoFinal")


def main():
    """Fun√ß√£o principal com menu interativo."""
    print("=" * 50)
    print("üé¨ YouTube Downloader v3 - Tudo Embutido üé¨")
    print("=" * 50)

    check_ffmpeg()

    while True:
        print("\nMENU DE OP√á√ïES:")
        print("1. üèÜ Baixar v√≠deo em Melhor Qualidade Poss√≠vel")
        print("2. üì∫ Baixar v√≠deo em 1080p (Full HD)")
        print("3. üíª Baixar v√≠deo em 720p (HD)")
        print("4. ‚ùå Sair")

        choice = input("\nEscolha uma op√ß√£o (1-4): ").strip()

        if choice in ['1', '2', '3']:
            url = input("Digite a URL do v√≠deo do YouTube: ").strip()
            if not url:
                print("‚ùå URL inv√°lida. Tente novamente.")
                continue

            quality_map = {'1': 'best', '2': '1080p', '3': '720p'}
            download_video(url, quality=quality_map[choice])

        elif choice == '4':
            print("üëã At√© logo!")
            break
        else:
            print("‚ùå Op√ß√£o inv√°lida. Por favor, escolha de 1 a 4.")

if __name__ == "__main__":
    main()
